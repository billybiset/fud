Init->L4Node: call(children, result)
alt es hoja
  L4Node->L4Node: get_result()
else no es hoja
  opt cambiar politica de comb.  
    L4Node->AuxCombPolicy : new CombinationPolicy
    L4Node->L4Node : CombPolicy := AuxCombPolicy
  end
  L4Node -> CombPolicy : combine()
  loop haya combinaciones
    CombPolicy -> CombPolicy : nueva combinacion
    CombPolicy -> L4Node: update(combinacion)
    L4Node -> L4Node : children.push(combinacion)
  end
  
  
  
OTRA VERSION CON PRUNE POLICY

 Init->L4Node: call(children, result)
alt is_leaf()
  L4Node->L4Node: get_result()
else !is_leaf()
  opt cambiar politica de comb.  
    L4Node->AuxCombPolicy : new CombinationPolicy
    L4Node->L4Node : CombPolicy := AuxCombPolicy
  end
  L4Node -> CombPolicy : combine()
  loop there are combinations
    CombPolicy -> CombPolicy : new combination
    CombPolicy -> L4Node: update(combination)
    L4Node -> PrunePolicy :is_useful(combination)
    alt useful combination
      PrunePolicy -> L4Node : 
      L4Node -> new_L4Node : new_children(combination)
      L4Node -> L4Node : children.push(new_L4Node)
    else useless combination
      PrunePolicy -> PrunePolicy : reject(combination)
  end
